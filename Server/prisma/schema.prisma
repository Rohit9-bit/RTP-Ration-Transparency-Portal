generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  user_id     Int          @id @default(autoincrement())
  first_name  String       @db.VarChar(50)
  last_name   String       @db.VarChar(50)
  phone_no    String       @unique @db.VarChar(15)
  email       String       @unique @db.VarChar(255)
  address     String
  password    String
  beneficiery beneficiery?
  shop_owner  shop_owner?
}

model beneficiery {
  beneficiery_id     Int                 @id @default(autoincrement())
  user               users               @relation(fields: [userId], references: [user_id])
  userId             Int                 @unique
  family_size        Int
  state              String
  district           String
  ration_card_no     String              @unique
  is_active          Boolean
  distributionCenter distribution_center @relation(fields: [centerId], references: [center_id])
  centerId           Int
  createdAt          DateTime            @default(now())
  quota              quota?
  transaction_log    transaction_log[]
  grieviance         grieviance[]
}

model shop_owner {
  manager_id          Int                  @id @default(autoincrement())
  user                users                @relation(fields: [userId], references: [user_id])
  userId              Int                  @unique
  createdAt           DateTime             @default(now())
  distribution_center distribution_center?
}

model distribution_center {
  center_id         Int                 @id @default(autoincrement())
  address           String
  center_name       String
  state             String
  district          String
  shopOwner         shop_owner          @relation(fields: [managerId], references: [manager_id])
  managerId         Int                 @unique
  beneficiery       beneficiery[]
  transaction_log   transaction_log[]
  shop_stock_ledger shop_stock_ledger[]
  grieviance        grieviance[]
}

model commodity {
  commodity_id    Int               @id @default(autoincrement())
  commodity_name  String
  unit            String
  createdAt       DateTime          @default(now())
  quota           quota             @relation(fields: [quotaId], references: [quota_id])
  quotaId         Int               @unique
  transaction_log transaction_log[]
  shop_stock      shop_stock_ledger @relation(fields: [ledgerId], references: [ledger_id])
  ledgerId        Int
}

model quota {
  quota_id           Int         @id @default(autoincrement())
  month_year         DateTime    @default(now())
  quantity_entitled  Float
  quantity_remaining Float
  beneficiery        beneficiery @relation(fields: [beneficieryId], references: [beneficiery_id])
  beneficieryId      Int         @unique
  commodity          commodity[]
}

model transaction_log {
  transaction_id             Int                 @id @default(autoincrement())
  quantity_entitled          Float
  quantity_received          Float
  is_verified_by_beneficiery Boolean
  anomaly_type               String[]            @default(["T_hour", "Q_var"])
  beneficiery                beneficiery         @relation(fields: [beneficieryId], references: [beneficiery_id])
  beneficieryId              Int
  distributionCenter         distribution_center @relation(fields: [centerId], references: [center_id])
  centerId                   Int
  commodity                  commodity           @relation(fields: [commodityId], references: [commodity_id])
  commodityId                Int
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @default(now())
}

model shop_stock_ledger {
  ledger_id          Int                 @id @default(autoincrement())
  stock_in_quantity  Float
  stock_out_quantity Float
  distributionCenter distribution_center @relation(fields: [centerId], references: [center_id])
  centerId           Int
  createdAt          DateTime            @default(now())
  commodity          commodity[]
}

model grieviance {
  grieviance_id      Int                 @id @default(autoincrement())
  issue_type         String
  description        String
  status             String[]            @default(["New", "In Review", "Closed"])
  distributionCenter distribution_center @relation(fields: [centerId], references: [center_id])
  centerId           Int
  beneficiery        beneficiery         @relation(fields: [beneficieryId], references: [beneficiery_id])
  beneficieryId      Int
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
}
